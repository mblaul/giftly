// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String                   @id @default(cuid())
    name            String?
    email           String?                  @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    givenGifts      Gift[]                   @relation("GivenGifts")
    recievedGifts   Gift[]                   @relation("ReceivedGifts")
    wishLists       WishList[]
    sharedWishLists SharedUsersOnWishLists[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Gift {
    id         String   @id @default(cuid())
    name       String
    link       String?
    fromUserId String?
    fromUser   User?    @relation("GivenGifts", fields: [fromUserId], references: [id], onDelete: Cascade)
    userId     String
    user       User     @relation("ReceivedGifts", fields: [userId], references: [id], onDelete: Cascade)
    wishListId String
    wishList   WishList @relation(fields: [wishListId], references: [id], onDelete: Cascade)
    position   Int
    claimed    Boolean  @default(false)

    @@unique([wishListId, position])
}

model WishList {
    id          String                   @id @default(cuid())
    name        String
    userId      String
    user        User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
    gifts       Gift[]
    token       Token?
    sharedUsers SharedUsersOnWishLists[]
}

model SharedUsersOnWishLists {
    wishListId   String
    wishList     WishList @relation(fields: [wishListId], references: [id])
    sharedUserId String
    sharedUser   User     @relation(fields: [sharedUserId], references: [id])
    permission   String?

    @@id([wishListId, sharedUserId])
}

model Token {
    id         String    @id @default(cuid())
    wishListId String?   @unique
    wishList   WishList? @relation(fields: [wishListId], references: [id])
}
